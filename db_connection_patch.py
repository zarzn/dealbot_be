# Database connection patch for tests
# This file is automatically generated by run_patched_tests.ps1

import os
import sys
from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker
from sqlalchemy.pool import QueuePool

# Make sure backend directory is in the Python path
backend_root = r'C:\Active Projects\AI AGENTIC DEALS SYSTEM\backend'
if backend_root not in sys.path:
    sys.path.insert(0, backend_root)

# Override database connection settings
def patch_database_connection():
    try:
        from core.database.database import get_db, engine, async_session_factory
        
        # Get the database URL
        from core.config.settings import get_settings
        settings = get_settings()
        db_url = settings.DATABASE_URL
        
        # Create a new engine with larger pool size
        new_engine = create_async_engine(
            db_url,
            echo=False,
            pool_size=20,
            max_overflow=30,
            pool_timeout=30,
            pool_recycle=1800,
            pool_pre_ping=True
        )
        
        # Create a new session factory
        new_async_session_factory = async_sessionmaker(
            new_engine, expire_on_commit=False, autoflush=False
        )
        
        # Replace the original engine and session factory
        engine._pool = new_engine._pool
        async_session_factory.kw['bind'] = new_engine
        
        print("Database connection patched with larger pool size")
        return new_engine, new_async_session_factory
    except ImportError as e:
        print(f"Import error while patching database connection: {str(e)}")
        print(f"Python path: {sys.path}")
        return None, None
    except Exception as e:
        print(f"Error patching database connection: {str(e)}")
        return None, None

# Apply the patch
try:
    patch_database_connection()
except Exception as e:
    print(f"Error patching database connection: {str(e)}")
